<html lang="en">

</html>

<head>
    <meta charset="UTF-8">
    <title>Couple Sleeping Habits</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=MonteCarlo&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=MonteCarlo&family=Square+Peg&display=swap" rel="stylesheet">
</head>
<style>
    .square-peg-regular {
        font-family: "Square Peg", cursive;
        font-weight: 400;
        font-style: normal;
    }


    .montecarlo-regular {
        font-family: "MonteCarlo", cursive;
        font-weight: 400;
        font-style: normal;
        fill: #894435;
    }

    .montecarlo-large {
        font-family: "MonteCarlo", cursive;
        font-weight: 400;
        font-style: normal;
        color: #894435;
        font-size: 40px;
    }

    .state {
        fill: #b07264;
    }

    .outline {
        fill: none;
        stroke: rgb(146, 140, 140);
        stroke-width: 1px;
    }

    .graticule {
        fill: none;
        stroke: grey;
        stroke-width: 1px;
    }

    #details {
        position: absolute;
        right: 5%;
        width: 250px;
        padding: 10px;
        background-color: #ffffff69;
        border: 1px solid #ccc;
        border-radius: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    button {
        width: 150px;
        margin-bottom: 5px;
        cursor: pointer;
    }

    #sentimentButtonAll {
        background: #647364;
        border: none;
        color: white;
        border-radius: 8px;
    }

    #sentimentButton1 {
        background: #152E49;
        border: none;
        color: white;
        border-radius: 8px;
    }

    #sentimentButton2 {
        background: #AF674E;
        border: none;
        color: white;
        border-radius: 8px;
    }

    #sentimentButton3 {
        background: #452F38;
        border: none;
        color: white;
        border-radius: 8px;
    }

    body {
        background: #D8C6BA;
        /* margin: 0; 
    padding: 0;
    background-image: url('Background Design for Visualized Article.png'); 
    background-position: center center;
    background-repeat: no-repeat;
    background-attachment: scroll;
    background-size: cover;
    height: 741px;
    width: 1104px; Minimum width of viewport */
    }
</style>

<body style="display: flex; flex-direction: column;">
    <div
        style="display: flex; height:440px; flex-direction: column;background: url('background-title.svg') no-repeat top center; background-size: 100% auto;">
    </div>
    <img src="feather_pen.png" alt="featherPen" style="width: 300px; height: auto; position: absolute;
                right: 50px; top: 150px;">
    <div
        style="display: flex; width:100%; height: 39%; align-items: center; justify-content: center;background: url('background-body.svg') no-repeat top center; background-size: 100% auto;">
        <div style="display: flex; align-items: start; justify-content: center;">
            <div
                style="display: flex; width: 150px; height: 150px; background: url('stamp.svg'); background-size: contain;">
            </div>
            <div style="width: 50%; text-align: justify;">Beneath the gentle glow of gas lamps and amidst the whispering
                silks of the night, the Rzeszotarski Society embarks on a journey to unravel the mysteries of modern
                slumber. Sleep, that enigmatic and essential aspect of human existence, has always held a place of
                reverence
                and curiosity. From the grand halls of Victorian mansions to the cozy bedrooms of contemporary homes,
                the
                manner in which we sleep offers profound insights into our relationships, health, and well-being.<br>

                <br>This grand exposé highlights the sleeping habits of couples across the United States, seeking to
                understand how these nocturnal patterns reflect broader societal trends and personal preferences.
                Through
                meticulous analysis and elegant visualizations, we illuminate the factors that influence whether couples
                share a bed or choose separate slumbers, and how these choices evolve over the course of a relationship.
                Herein, we present a detailed analysis of contemporary American sleeping patterns, through the lens of a
                Victorian-inspired inquiry.
            </div>
        </div>

    </div>
    <div
        style="display: flex; width:100%; height: 10%; align-items: start; justify-content: center;background: url('background-body.svg') repeat top center; background-size: 100% auto;">
        <div
            style="display: flex; width:100%; height: 100%; align-items: center; justify-content: center;background: url('victoriandivider.svg') no-repeat top center; background-size: contain;">
        </div>
    </div>
    <!-- <div
        style="display: flex; width:100%; height: 10%; align-items: center; justify-content: center;background: url('victoriandivider.svg') no-repeat top center; background-size: contain;">
    </div> -->
    <div
        style="display: flex;height: 821px; align-items: start;justify-content: center; background: url('background-body.svg') repeat top center; background-size: 100% auto;">
        <div id="text1" style="background: transparent; width: 1300px;">
            <div style="padding-left: 100px; margin-top: 20px; text-align: justify;">Our journey through the nocturnal
                world of American couples would be incomplete without a grand map to guide us. Imagine a map, delicately
                adorned with the faces of people in our esteemed society, stretching from the bustling metropolises of
                the Pacific to the tranquil abodes of the South Atlantic. Each region whispers its own unique tale of
                nocturnal habits and conjugal customs.<br>

                <br>As we traverse this varied landscape, the map begins to reveal an elegant pattern: a correlation
                between the length of relationships and the practice of sleeping apart. In the stately Middle Atlantic
                and the genteel South Atlantic regions, we find that couples who have been together for many years often
                embrace separate beds. This inclination towards separate slumbers among long-term partners suggests a
                mature understanding of the importance of personal space and the quest for quality rest. These couples,
                seasoned by years of companionship, appear to value a restful night’s sleep, untroubled by the nocturnal
                movements of their beloved.<br>

                <br>Conversely, in the vibrant Pacific region, couples exhibit a slightly lower tendency towards
                sleeping apart, regardless of the length of their relationships. Here, the breezy, relaxed attitudes of
                the West Coast seem to foster a different approach to co-sleeping. Cultural and lifestyle differences
                play a significant role, even among those who have shared many years together, showcasing the diverse
                nature of American slumber.<br>

                <br>By visualizing these patterns, we gain profound insights into how relationship duration and regional
                characteristics shape the way couples approach their sleeping arrangements. Each region, with its
                distinct customs and traditions, adds a unique flavor to the collective narrative of sleep. This map,
                much like a tapestry, weaves together the rich and varied experiences of couples across the nation,
                painting a picture of American society as diverse and multifaceted as the stars that adorn the night
                sky.
            </div>
        </div>
        <div>
            <svg id="mapTitle" height="50" width="900"></svg>
            <svg id="map" height="500" width="900" style="background: transparent">
                <defs>
                    <pattern id="image1" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image1Element" href="./less_1_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                    <pattern id="image2" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image2Element" href="./1_5_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                    <pattern id="image3" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image3Element" href="./6_10_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                    <pattern id="image4" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image4Element" href="./11_15_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                    <pattern id="image5" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image5Element" href="./16_20_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                    <pattern id="image6" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <image id="image6Element" href="./20_more_years.svg" x="0" y="0" width="1" height="1"
                            preserveAspectRatio="xMidYMid slice" />
                    </pattern>
                </defs>
            </svg>
            <svg id="mapLegend" height="280" width="900"></svg>
            <div id="mapTooltip"
                style="position: absolute; display: none; background: rgba(0,0,0,0.6); color: white; padding: 5px; border-radius: 5px; font-size: 12px;">
            </div>
        </div>
    </div>
    <div
        style="display: flex; width:100%; height: 10%; align-items: start; justify-content: center;background: url('background-body.svg') repeat top center; background-size: 100% auto;">
        <div
            style="display: flex; width:100%; height: 100%; align-items: center; justify-content: center;background: url('victoriandivider.svg') no-repeat top center; background-size: contain;">
        </div>
    </div>
    <div
        style="display: flex; width:100%; height: 45.3%; align-items: center; justify-content: center;background: url('background-body.svg') no-repeat top center; background-size: 100% auto;">
        <div style="width: 80%; text-align: justify;">The reasons for this separation of bedchambers are as varied as
            the colors of a debutante's ballgowns. With the aid of a pie chart, we depict the frequency of sleeping
            apart among our respondents. The largest segment, 'Never', suggests a majority who remain steadfast in their
            shared slumber. This finding highlights the enduring value many couples place on the intimacy and closeness
            of sharing a bed, despite the potential challenges.<br>

            Yet, as we delve deeper, we find that a significant portion of couples experience occasional separations, be
            it 'Once a year or less' or 'A few times per month'. *Gasp*These occasional separations often coincide with
            specific circumstances, such as one partner's temporary health issues or a particularly stressful period
            that disrupts regular sleeping patterns.<br>

            <br>A significant count asserts that snoring is the mischievous sprite that drives couples apart. And pray,
            do not forget the nocturnal pilgrimages, frequent, though not for reasons divine, but rather the siren calls
            of nature’s duties. Others cite the noble pursuit of better rest, or even a child's comfort, as the cause
            for their nightly exodus. And though many might speculate otherwise, few confess that a lover's quarrel
            sends them to seek refuge in the solitude of their personal chambers. Disparate slumber preferences, a cause
            for many a nighttime fray, are surprisingly less contentious, with few choosing to battle over room
            temperatures or the cruel theft of covers.<br>

            <br>Together, these factors weave a complex tapestry of modern relationships, showing that the decision to
            sleep apart is often a pragmatic one, rooted in a desire for mutual well-being. Despite the occasional
            retreat to separate chambers, the underlying bond remains strong, underscoring the dynamic nature of
            contemporary partnerships.
        </div>
    </div>
    <div id="pie-reasons"
        style="display: flex;height: 66%; align-items: start;justify-content: space-evenly;background: url('background-body.svg') repeat bottom center; background-size: 100% auto;">
        <div style="display: flex; height: 100%; align-items: center; justify-content: start; flex-direction: column;">
            <svg id="pieTitle" height="50" width="500"></svg>
            <svg id="pie" width="500" height="400" style="background: transparent;">
            </svg>
        </div>
        <div style="display: flex;flex-direction: column;">
            <svg id="reasonsTitle" height="70" width="600"></svg>
            <svg id="reasons" height="400" width="600" style="background: transparent">
            </svg>
        </div>
    </div>
    <div id="sentimentDisplayBorder"
        style="display: flex; width:100%; height: 10%; align-items: start; justify-content: center;background: url('background-body.svg') repeat top center; background-size: 100% auto;">
        <div
            style="display: flex; width:100%; height: 100%; align-items: center; justify-content: center;background: url('victoriandivider.svg') no-repeat top center; background-size: contain;">
        </div>
    </div>
    <div id="sentimentDisplay"
        style="display: flex;height: 100%; align-items: center;justify-content: center;background: url('background-body.svg') repeat bottom center; background-size: 100% auto;">
        <div style="display: flex; flex-direction: column; align-items: center;">
            <div
                style="width: 50%; display: flex; justify-content: center; flex-direction: column; margin-bottom: 50px;">
                <div class="montecarlo-large" style="text-align: center;">Sentiments Towards Sleeping Apart</div><br>
                <div style="text-align: justify;">In our exploration of the sentiments towards the practice of sleeping
                    apart, we unveil the manifold perspectives held by couples. Some find that such an arrangement
                    fortifies their amorous connection and enhances their intimate relations, while others remain
                    indifferent or even opposed. These multifaceted views are depicted with grace in the accompanying
                    bar charts, where opinions span from 'Strongly disagree' to 'Strongly agree'.<br></div>
            </div>
            <div style="display: flex; flex-direction: row; justify-content: space-between;">
                <div style="display: flex; flex-direction:column; height: 100%; margin-left: 100px; width: 30%;">
                    <!-- <svg id="text1" width="400" style="background: transparent;"> -->
                    <div style="text-align: justify;">For certain couples, the act of sleeping apart rekindles a sense
                        of intimacy and gratitude for the moments shared. It alleviates nightly disturbances and
                        augments overall well-being. These pairs often recount how separate beds have rejuvenated their
                        union, providing a harmonious balance between closeness and personal space.<br>

                        <br>Conversely, there are those who perceive sleeping apart as a diminishment of their intimacy,
                        deeming the shared bed a cornerstone of their affectionate bond. This divergence in sentiment
                        underscores the profoundly personal nature of sleeping arrangements, where one couple’s solution
                        may not suit another’s preference.<br>

                        <br>It is indeed a curious and intriguing observation to note that ladies and gentlemen of our
                        time display distinct variations in their sentiments. The gentlemen generally express, with mild
                        agreement, that sleeping apart can lead to a more satisfying slumber. In stark contrast, ladies
                        assert with greater conviction that the benefits of such arrangements extend well beyond mere
                        restfulness, profoundly enhancing their nightly peace. Both genders maintain a neutral stance on
                        the effects such arrangements have on their romantic relations, with gentlemen showing notable
                        skepticism about any positive impact on their intimate interactions.

                    </div>
                    <!-- </svg> -->
                </div>
                <div style="display: flex; flex-direction: row;">
                    <div style="display:flex; flex-direction: column;">
                        <div id="sentimentBtn" style="display:flex; flex-direction: row; margin-left: 10px;">
                            <svg id="sentimentLgd" height="100" width="320" style="background: transparent"></svg>
                            <div style="display:flex; flex-direction: column;margin-left: 300px;">
                                <button id="sentimentButtonAll">Overall Sentiment</button>
                                <button id="sentimentButton1">Sentiment 1</button>
                                <button id="sentimentButton2">Sentiment 2</button>
                                <button id="sentimentButton3">Sentiment 3</button>
                            </div>

                        </div>
                        <div style="display:flex; flex-direction: row; margin-right: 280px; position: relative;">
                            <svg id="sentiment" height="350" width="600" style="background: transparent">
                            </svg>
                            <div id="genderDiv"
                                style="display:none; justify-content: center; position: absolute; right: -35%; top: 10%;">
                                <div style="display: flex; flex-direction: column; align-items: center;">
                                    <span class="montecarlo-large">Gender Opinions</span>
                                    <div style="display: flex; flex-direction: row; align-items: center;">
                                        <div style="display: flex; flex-direction: column; align-items: center;">
                                            <span id="womanText">Default text</span>
                                            <img id="woman" src="./woman.svg" alt="Woman" height="150">
                                        </div>
                                        <div style="display: flex; flex-direction: column; align-items: center;">
                                            <span id="manText">Default text</span>
                                            <img id="man" src="./man.svg" alt="Man" height="150">
                                        </div>
                                    </div>
                                </div>
                                
                                
                            </div>
                        </div>

                    </div>
                    <!-- <div> -->

                    <!-- </div> -->

                </div>
            </div>

        </div>


    </div>
    <div
        style="display: flex; width:100%; height: 10%; align-items: start; justify-content: center;background: url('background-body.svg') repeat top center; background-size: 100% auto;">
        <div
            style="display: flex; width:100%; height: 100%; align-items: center; justify-content: center;background: url('victoriandivider.svg') no-repeat top center; background-size: contain;">
        </div>
    </div>
    <div
        style="display: flex;height: 42.5%; align-items: start;justify-content: space-evenly;background: url('background-end.svg') no-repeat bottom center; background-size: 100% auto;">
        <div style="width: 80%; text-align: justify;">
            <span class="montecarlo-large">Thus, </span><span>
                the dance of nightly repose plays on, each couple to their own rhythm, each soul to their own silent
                reverie. As we bid you goodnight, we hope that our findings have illuminated the delicate dance of sleep
                and relationships in the modern age, inspired by the elegance and propriety of the Victorian era. As
                your faithful chronicler, we shall continue to observe, ever ready to inscribe the evolving mores of our
                time. But patience, gentle reader, while the boudoir's secrets are plentiful, one must recall that
                discretion is the better part of valor.<br>

                <br>Yours devotedly amidst the whispered secrets of night,<br>
                <span class="montecarlo-large">Lady Sonia and Sir Bandar</span>

            </span>
        </div>
    </div>

    <script>
        const svg = d3.select("#map");
        const width = svg.attr("width");
        const height = svg.attr("height");
        const margin = { top: 20, right: 20, bottom: 20, left: 20 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;
        const map = svg.append("g").attr("transform", "translate(" + (margin.left + 20) + "," + (margin.top + 5) + ") scale(" + 1 + ")");
        const zoom = d3.zoom()
            .scaleExtent([1, 10])
            .on('zoom', function (event) {
                map.attr('transform', event.transform);
            });

        const pie = d3.select("#pie");
        const pieWidth = pie.attr("width");
        const pieHeight = pie.attr("height");
        const radius = Math.min(pieWidth, pieHeight) / 2.5;
        const pieMargin = { top: 20, right: 20, bottom: 20, left: 20 };
        const pieChart = pie.append("g").attr("transform", `translate(${pieWidth / 2}, ${pieHeight / 2})`);

        const reasons = d3.select("#reasons");
        const reasonsWidth = reasons.attr("width");
        const reasonsHeight = reasons.attr("height");
        const reasonsMapWidth = reasonsWidth - margin.left - margin.right;
        const reasonsMapHeight = reasonsHeight - margin.top - margin.bottom;
        const reasonsMap = reasons.append("g").attr("transform", "translate(" + (margin.left + 10) + "," + (margin.top + 30) + ")");

        const sentiment = d3.select("#sentiment");
        const sentimentWidth = sentiment.attr("width");
        const sentimentHeight = sentiment.attr("height") * 0.8;
        const sentimentMapWidth = sentimentWidth - margin.left - margin.right;
        const sentimentMapHeight = sentimentHeight - margin.top - margin.bottom;
        const sentimentMap = sentiment.append("g").attr("transform", "translate(50,40)");
        var clickedSliceLabel;
        var sentimentDisplay = document.getElementById("sentimentDisplay");
        sentimentDisplay.style.display = "none";
        var sentimentDisplayBorder = document.getElementById("sentimentDisplayBorder");
        sentimentDisplayBorder.style.display = "none";

        const pieTitle = d3.select("#pieTitle");
        pieTitle.append('text')
            .attr('x', 270)
            .attr('y', 30)
            .attr('text-anchor', 'middle')
            .style('font-size', '35px')
            .style('font-weight', 'bold')
            .attr("class", "montecarlo-regular")
            .text('Frequency of Nocturnal Divergence');

        const reasonsTitle = d3.select("#reasonsTitle");
        reasonsTitle.append('text')
            .attr('x', 205)
            .attr('y', 30)
            .attr('text-anchor', 'middle')
            .style('font-size', '35px')
            .style('font-weight', 'bold')
            .attr("class", "montecarlo-regular")
            .text('Rationales for Nocturnal Separation');

        window.onload = function () {
            var sentimentAll = document.getElementById("sentimentButtonAll");
            var sentiment1 = document.getElementById("sentimentButton1");
            var sentiment2 = document.getElementById("sentimentButton2");
            var sentiment3 = document.getElementById("sentimentButton3");
            const requestData = async function () {
                const oGdata = await d3.csv("./sleeping-pattern-formatted.csv");
                let data = []

                oGdata.forEach(d => {
                    for (let key in d) {
                        if (d[key] === "True") {
                            d[key] = true;
                        } else if (d[key] === "False") {
                            d[key] = false;
                        }
                    }
                    d["Our sex life has improved as a result of sleeping in separate beds"] = d["our sex life has improved as a result of sleeping in separate beds."]
                    d["Sleeping in separate beds helps us to stay together"] = d["sleeping in separate beds helps us to stay together."]
                    d["We sleep better when we sleep in separate beds"] = d["we sleep better when we sleep in separate beds."]

                });

                //////////////////////////////////TOPOJSON MAP/////////////////////////////////////////
                const us = await d3.json("./us-smaller.json");
                var states = topojson.feature(us, us.objects.states);
                var statesMesh = topojson.mesh(us, us.objects.states);
                var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
                var path = d3.geoPath().projection(projection);

                let statePaths = map.selectAll("path.state").data(states.features)
                    .join("path")
                    .attr("class", "state")
                    .attr("d", path);

                map.append("path").datum(statesMesh)
                    .attr("class", "outline")
                    .attr("d", path);

                //////////////////////////////////////////////////////////////////////////////////////

                const sleepFrequencies = oGdata.map(item => item.sleep_freq);
                const uniqueSleepFrequencies = new Set(sleepFrequencies);
                const uniqueSleepFrequenciesArray = [...uniqueSleepFrequencies];
                const totalCount = oGdata.length;
                const count = (data, frequency) => {
                    return data.reduce((count, item) => {
                        if (item.sleep_freq === frequency) {
                            return count + 1;
                        }
                        return count;
                    }, 0);
                };
                const pieValue = [{ label: 'Never', value: count(oGdata, "Never") }, { label: "Once a year or less", value: count(oGdata, "Once a year or less") }, { label: "A few times per month", value: count(oGdata, "A few times per month") }, { label: "Once a month or less", value: count(oGdata, "Once a month or less") }, { label: "A few times per week", value: count(oGdata, "A few times per week") }, { label: "Every night", value: count(oGdata, "Every night") }];
                const colorScale = d3.scaleOrdinal()
                    .domain(['Never', "Once a year or less", "A few times per month", "Once a month or less", "A few times per week", "Every night"])
                    .range(["#958C6F", "#894435", "#97A29D", "#DDD8CC", "#4B5A5B", "#E1886A"]);

                updatePie(pieValue, pieChart, colorScale, radius, -2 * Math.PI / 2, 360, oGdata, reasons, reasonsMapHeight, reasonsMapWidth, sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                reasonsMapping(oGdata, reasons, reasonsMapHeight, reasonsMapWidth, "", "#434537");

                sentimentAll.addEventListener("click", function () {
                    sentimentChart(oGdata, clickedSliceLabel, 'overview', sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                });
                sentiment1.addEventListener("click", function () {
                    sentimentChart(oGdata, clickedSliceLabel, 'Our sex life has improved as a result of sleeping in separate beds', sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                });
                sentiment2.addEventListener("click", function () {
                    sentimentChart(oGdata, clickedSliceLabel, 'Sleeping in separate beds helps us to stay together', sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                });
                sentiment3.addEventListener("click", function () {
                    sentimentChart(oGdata, clickedSliceLabel, 'We sleep better when we sleep in separate beds', sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                });

                let groupedData = getDataMapping(oGdata);
                plotCircles(oGdata, groupedData, projection, map, mapHeight, mapWidth);

            }

            requestData();
        };

        function updatePie(pieValue, pieChart, colorScale, radius, startAngle, endAngle, oGdata, reasons, reasonsMapHeight, reasonsMapWidth, sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth) {
            var clickedSlice = null;
            var arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            var tooltip = d3.select('body').append('div')
                .attr('class', 'tooltip')
                .style('position', 'absolute')
                .style('background-color', 'black')
                .style('padding', '5px')
                .style('border', '1px solid black')
                .style('color', 'white')
                .style('visibility', 'hidden');

            var pie = d3.pie()
                .startAngle(startAngle)
                .endAngle(endAngle)
                .value(function (d) { return d.value; })
                .sort(null);

            var arcs = pieChart.selectAll('g.arc')
                .data(pie(pieValue))
                .enter()
                .append('g')
                .attr('class', 'arc');

            var arcOver = d3.arc()
                .innerRadius(0)
                .outerRadius(radius + 10);

            arcs.append('path')
                .attr('d', arc)
                .attr('fill', function (d, i) { return colorScale(d.data.label); })
                .style('cursor', 'pointer')
                .on('mouseover', function (event, d) {
                    if (clickedSlice !== null) {
                        return;
                    }
                    if (d.data.label === "Never") {
                        return;
                    }
                    if (clickedSlice === null) {
                        reasonsMapping(oGdata, reasons, reasonsMapHeight, reasonsMapWidth, d.data.label, colorScale(d.data.label));
                    }
                    d3.select(this).transition()
                        .duration(500)
                        .attr('d', arcOver)
                        .attr('stroke', '#dee599')
                        .attr('stroke-width', '4');

                    window.requestAnimationFrame(function () {
                        tooltip.style('visibility', 'visible')
                            .text(d.data.label + ': ' + (d.data.value / oGdata.length * 100).toFixed(2) + '%')
                            .style('left', (d3.pointer(event)[0] + 10) + 'px')
                            .style('top', (d3.pointer(event)[1] - 10) + 'px');
                    });
                })
                .on('click', function (event, d) {

                    var sentimentDisplay = document.getElementById("sentimentDisplay");
                    var sentimentDisplayBorder = document.getElementById("sentimentDisplayBorder");
                    if (d.data.label === "Never") {
                        return;
                    }
                    if (clickedSlice === this) {
                        d3.select(clickedSlice).transition()
                            .duration(500)
                            .attr('d', arc)
                            .attr('stroke', 'none');
                        clickedSlice = null;
                        //document.getElementById('pie-reasons').style.height = '66%';
                        //document.getElementById('pie-reasons').style.backgroundImage = 'background-end.svg';
                        sentimentDisplay.style.display = "none";
                        sentimentDisplayBorder.style.display = "none";
                    } else {
                        if (clickedSlice !== null) {
                            sentimentDisplay.style.display = "none";
                            sentimentDisplayBorder.style.display = "none";
                            d3.select(clickedSlice).transition()
                                .duration(500)
                                .attr('d', arc)
                                .attr('stroke', 'none');
                        }
                        clickedSlice = this;
                        //document.getElementById('pie-reasons').style.height = '70%';
                        //document.getElementById('pie-reasons').style.backgroundImage = "url('background-body.svg')";

                        d3.select(clickedSlice).transition()
                            .duration(500)
                            .attr('d', arcOver)
                            .attr('stroke', '#dee599')
                            .attr('stroke-width', '4');
                        sentimentDisplay.style.display = "flex";
                        sentimentDisplayBorder.style.display = "flex";
                        sentimentChart(oGdata, d.data.label, 'overview', sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth);
                        sentimentDisplay.scrollIntoView({ behavior: 'smooth' });
                    }
                    reasonsMapping(oGdata, reasons, reasonsMapHeight, reasonsMapWidth, d.data.label, colorScale(d.data.label));
                    clickedSliceLabel = d.data.label;
                    window.requestAnimationFrame(function () {
                        tooltip.style('visibility', 'visible')
                            .text(d.data.label + ': ' + (d.data.value / oGdata.length * 100).toFixed(2) + '%')
                            .style('left', (d3.pointer(event)[0] + 10) + 'px')
                            .style('top', (d3.pointer(event)[1] - 10) + 'px');
                    });
                })
                .on('mouseout', function (d) {
                    if (clickedSlice !== null) {
                        return;
                    }
                    if (this !== clickedSlice) {
                        reasonsMapping(oGdata, reasons, reasonsMapHeight, reasonsMapWidth, "", "#434537");
                        d3.select(this).transition()
                            .duration(500)
                            .attr('d', arc)
                            .attr('stroke', 'none');
                        window.requestAnimationFrame(function () {
                            tooltip.style('visibility', 'hidden');
                        });
                        //document.getElementById('pie-reasons').style.height = '66%';
                        //document.getElementById('pie-reasons').style.backgroundImage = "url('background-end.svg')";
                    }
                });

            arcs.append('text')
                .attr('transform', function (d) { return 'translate(-80,0)'; })
                .attr('text-anchor', 'middle')
                .style('fill', 'white')
                .text(function (d) { return d.data.label === 'Never' ? d.data.label : ''; });

        }

        function reasonsMapping(oGdata, svg, reasonsMapHeight, reasonsMapWidth, filterVariable, color) {
            if (filterVariable !== "") {
                oGdata = oGdata.filter(d => d.sleep_freq === filterVariable);
            }
            svg.selectAll("*").remove();
            const mappingReasons = {
                "snores": {
                    original: "Snoring",
                    trunc: "Snoring"
                },
                "frequent bathroom trips in the night": {
                    original: "Frequent bathroom trips in the night",
                    trunc: "Frequenting bathroom"
                },
                "sick": {
                    original: "Sick/Ill",
                    trunc: "Sick/Ill"
                },
                "no longer physically intimate": {
                    original: "No longer physically intimate",
                    trunc: "No physical intimacy"
                },
                "different temperature preferences for the room": {
                    original: "Different temperature preferences for the room",
                    trunc: "Temperature preference"
                },
                "argument/fight": {
                    original: "Argument/Fight",
                    trunc: "Argument/Fight"
                },
                "not enough space": {
                    original: "Not enough space to sleep",
                    trunc: "Sleeping space"
                },
                "do not want to share the covers": {
                    original: "Do not want to share the covers",
                    trunc: "Sharing covers"
                },
                "needs to sleep with a child": {
                    original: "One needs to sleep with the child",
                    trunc: "Child needs"
                },
                "night working/very different sleeping times": {
                    original: "Night working/Very different sleeping times",
                    trunc: "Different sleeping times"
                }
            };
            var reasonCounts = countTrueAttributes(oGdata);
            var data = Object.keys(reasonCounts).map(function (key) {
                return {
                    attribute: key,
                    detail: mappingReasons[key],
                    count: reasonCounts[key]
                };
            });

            data.sort((a, b) => b.count - a.count);
            const top5Categories = new Set(data.slice(0, 5).map(d => d.attribute));
            const rootData = {
                name: "Root",
                children: data
            };
            const countsData = data.map(d => d.count);
            const maxCount = d3.max(countsData);
            const minCount = d3.min(countsData);
            const countColorScale = d3.scaleSequential(d3.interpolateRgb("white", color)).domain([minCount, maxCount]);
            const tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("position", "absolute")
                .style("visibility", "hidden")
                .style("background-color", "#fff")
                .style("padding", "10px")
                .style("border-radius", "5px")
                .style("border", "1px solid #ccc")
                .style("box-shadow", "0 2px 4px rgba(0, 0, 0, 0.1)");


            const treemap = d3.treemap()
                .size([reasonsMapWidth, reasonsMapHeight])
                .padding(1);

            const root = d3.hierarchy(rootData)
                .sum(d => d.count);

            treemap(root);
            svg.selectAll("rect")
                .data(root.leaves())
                .enter().append("rect")
                .attr("x", d => d.x0)
                .attr("y", d => d.y0)
                .attr("width", d => d.x1 - d.x0)
                .attr("height", d => d.y1 - d.y0)
                .attr("fill", d => countColorScale(d.value))
                .on("mouseover", function (event, d) {
                    tooltip.html(`${d.data.detail.original}<br>Count: ${d.value}`)
                        .style("visibility", "visible");
                })
                .on("mousemove", function (event) {
                    tooltip.style("top", (event.pageY - 10) + "px")
                        .style("left", (event.pageX + 10) + "px");
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });


            let textElements = svg.selectAll("text")
                .data(root.leaves())
                .enter().append("text")
                .filter(d => top5Categories.has(d.data.attribute))
                .attr("x", d => d.x0 + 5)
                .attr("y", d => d.y0 + 20)
                .text(d => `${d.data.detail.trunc}`)
                .attr("font-size", "12px")
                .attr("fill", d => {
                    return d3.lab(countColorScale(d.value)).l < 70 ? "white" : '#82857e';
                });
            textElements.each(function (d) {
                wrapText(d3.select(this), 80); // Assuming 100 is the max width for text
            });

        }


        function countTrueAttributes(data) {
            var attributes = [
                "different temperature preferences for the room",
                "do not want to share the covers",
                "frequent bathroom trips in the night",
                "needs to sleep with a child",
                "night working/very different sleeping times",
                "no longer physically intimate",
                "not enough space",
                "sick",
                "snores",
                "argument/fight"
            ];

            var counts = {};

            attributes.forEach(function (attribute) {
                counts[attribute] = 0;
            });

            data.forEach(function (obj) {
                attributes.forEach(function (attribute) {
                    if (obj[attribute] === true) {
                        counts[attribute]++;
                    }
                });
            });

            return counts;
        }

        function plotDetailedChart(svg, margin, data, mappingReasons, chartHeight, chartWidth) {
            svg.selectAll("g").remove();
            const detailChart = svg.append("g")
                .attr("transform", "translate(" + margin.left + "," + 40 + ")");
            let counts = {
                bathroom_trip: 0,
                child: 0,
                cover_sharing: 0,
                fight: 0,
                intimacy: 0,
                sick: 0,
                snores: 0,
                space: 0,
                temperature: 0,
                work: 0
            };
            data.forEach(row => {
                for (let key in counts) {

                    if (row[key] === true) {
                        counts[key]++;
                    }
                }
            });
            let countsArray = Object.keys(counts).map(key => ({
                category: key,
                count: counts[key],
                description: mappingReasons[key]
            }));
            countsArray.sort((a, b) => b.count - a.count); // Sort descending by count
            const top5Categories = new Set(countsArray.slice(0, 5).map(d => d.category));
            const rootData = {
                name: "Root",
                children: countsArray
            };
            const countsData = countsArray.map(d => d.count);
            const maxCount = d3.max(countsData);
            const minCount = d3.min(countsData);
            const countColorScale = d3.scaleSequential([minCount, maxCount], d3.interpolateBlues);
            const tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("position", "absolute")
                .style("visibility", "hidden")
                .style("background-color", "#fff")
                .style("padding", "10px")
                .style("border-radius", "5px")
                .style("border", "1px solid #ccc")
                .style("box-shadow", "0 2px 4px rgba(0, 0, 0, 0.1)");


            const treemap = d3.treemap()
                .size([chartWidth, chartHeight])
                .padding(1);

            const root = d3.hierarchy(rootData)
                .sum(d => d.count);

            treemap(root);

            detailChart.selectAll("rect")
                .data(root.leaves())
                .enter().append("rect")
                .attr("x", d => d.x0)
                .attr("y", d => d.y0)
                .attr("width", d => d.x1 - d.x0)
                .attr("height", d => d.y1 - d.y0)
                .attr("fill", d => countColorScale(d.value))
                .on("mouseover", function (event, d) {
                    tooltip.html(`${d.data.description.original}<br>Count: ${d.value}`)
                        .style("visibility", "visible");
                })
                .on("mousemove", function (event) {
                    tooltip.style("top", (event.pageY - 10) + "px")
                        .style("left", (event.pageX + 10) + "px");
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });

            detailChart.selectAll("text")
                .data(root.leaves())
                .enter().append("text")
                .filter(d => top5Categories.has(d.data.category))
                .attr("x", d => d.x0 + 5)
                .attr("y", d => d.y0 + 20)
                .text(d => `${d.data.description.trunc}`)
                .attr("font-size", "12px")
                .attr("fill", "white");

        }

        function sentimentChart(oGdata, filterVariable, subSection, sentiment, sentimentMap, sentimentMapHeight, sentimentMapWidth) {
            const sentimentDegree = ['Strongly disagree', 'Somewhat disagree', 'Neither agree nor disagree', 'Somewhat agree', 'Strongly agree'];
            const sentimentTopic = [
                "Our sex life has improved as a result of sleeping in separate beds",
                "Sleeping in separate beds helps us to stay together",
                "We sleep better when we sleep in separate beds"
            ];

            if (filterVariable !== "") {
                oGdata = oGdata.filter(d => d.sleep_freq === filterVariable);
            }
            const counts = countSentiments(oGdata, sentimentTopic, sentimentDegree)
            var data = Object.keys(counts).map(function (key) {
                return {
                    attribute: key,
                    count: counts[key]
                };
            });

            if (subSection !== "overview") {
                data = data.filter(d => d.attribute === subSection);
            }
            console.log(data);

            const legendSvg = d3.select("#sentimentLgd");
            const legendWidth = legendSvg.attr("width");
            const legendHeight = legendSvg.attr("height");
            legendSvg.selectAll("*").remove();
            sentimentMap.selectAll("*").remove();
            sentiment.selectAll("text").remove();

            var x = d3.scaleBand()
                .domain(sentimentDegree)
                .range([0, sentimentMapWidth])
                .padding(0.1);

            var xSubgroup = d3.scaleBand()
                .domain(data.map(function (d) { return d.attribute; }))
                .range([0, x.bandwidth()])
                .padding(0.05);

            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function (d) { return d3.max(sentimentDegree, function (degree) { return d.count[degree].total; }); })])
                .range([sentimentMapHeight, 0]);

            sentimentMap.append("g")
                .attr("transform", "translate(0," + sentimentMapHeight + ")")
                .call(d3.axisBottom(x));

            sentimentMap.append("g")
                .call(d3.axisLeft(y));

            var color = d3.scaleOrdinal()
                .domain(sentimentTopic)
                .range(["#152E49", "#AF674E", "#452F38"]);

            var groups = sentimentMap.selectAll("g.attribute")
                .data(sentimentDegree)
                .enter().append("g")
                .attr("class", "attribute")
                .attr("transform", function (d) { return "translate(" + x(d) + ",0)"; });

            groups.selectAll("rect")
                .data(function (d) {
                    if (subSection === "overview") {
                        return data.map(function (item) {
                            return { attribute: item.attribute, count: item.count[d].total || 0, male: item.count[d].male || 0, female: item.count[d].female || 0 };
                        });
                    } else {
                        return [{ attribute: d, count: data[0].count[d].total || 0, male: data[0].count[d].male || 0, female: data[0].count[d].female || 0 }];  // Return a single-element array if subSection is not "overview"
                    }
                })
                .enter().append("rect")
                .attr("x", function (d) { return xSubgroup(d.attribute); })
                .attr("y", function (d) { return y(d.count); })
                .attr("width", xSubgroup.bandwidth())
                .attr("height", function (d) { return sentimentMapHeight - y(d.count); })
                .attr("fill", function (d) {
                    if (subSection === "overview") {
                        return color(d.attribute);
                    } else {
                        return color(subSection);
                    }
                })
                .on('mouseover', function (event, d) {
                    var femalePerc = (d.female / d.count * 100).toFixed(1);
                    var malePerc = (d.male / d.count * 100).toFixed(1);
                    document.getElementById('womanText').textContent = `${femalePerc}%`;
                    document.getElementById('manText').textContent = `${malePerc}%`;
                    document.getElementById('genderDiv').style.display = 'flex';
                })
                .on('mouseout', function (event, d) {
                    document.getElementById('genderDiv').style.display = 'none';
                });

            sentimentMap.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x))
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", "rotate(-65)");

            sentimentMap.append("text")
                .attr("transform", "translate(" + (sentimentMapWidth / 2) + " ," + (sentimentMapHeight + 40) + ")")
                .style("text-anchor", "middle")
                .text("Sentiment Degree");

            sentimentMap.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 0 - 50)
                .attr("x", 0 - (sentimentHeight / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .text("Sentiment Counts");

            sentiment.append("text")
                .attr("x", sentimentMapWidth / 2 + 50)
                .attr("y", 0)
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .text(`Sleeping apart... ${filterVariable}`);


            var legend = legendSvg.selectAll('.legend')
                .data(subSection !== 'overview' ? [subSection] : sentimentTopic)
                .enter()
                .append('g')
                .attr('class', 'legend')
                .attr('transform', function (d, i) { return 'translate(' + (-legendWidth + 20) + ',' + ((i * 20) + 10) + ')'; });

            legend.append('rect')
                .attr('x', legendWidth - 18)
                .attr('width', 18)
                .attr('height', 18)
                .style('fill', function (d) { return color(d); });

            legend.append('text')
                .attr('x', legendWidth - 24 + 18 + 10)
                .attr('y', 9)
                .attr('dy', '.35em')
                .style('font-size', '11px')
                .style('text-anchor', 'start')
                .text(function (d) { return d; });

        }

        function countSentiments(data, sentimentTopic, sentimentDegree) {
            var counts = {};

            sentimentTopic.forEach(function (topic) {
                counts[topic] = {};
                sentimentDegree.forEach(function (degree) {
                    counts[topic][degree] = { male: 0, female: 0, total: 0 };
                });
            });

            data.forEach(function (obj) {
                sentimentTopic.forEach(function (topic) {
                    sentimentDegree.forEach(function (degree) {
                        if (obj[topic] === degree) {
                            counts[topic][degree].total++;
                            if (obj["Gender"] === 'Male') {
                                counts[topic][degree].male++;
                            } else if (obj["Gender"] === 'Female') {
                                counts[topic][degree].female++;
                            }
                        }
                    });
                });
            });

            return counts;
        }


        function getDataMapping(data) {

            //derived from ChatGPT
            const locations = [
                { name: "Pacific", coordinates: [-122.4194, 37.7749] }, // Example coordinates for San Francisco
                { name: "South Atlantic", coordinates: [-80.1918, 25.7617] }, // Example coordinates for Miami
                { name: "Middle Atlantic", coordinates: [-74.0060, 40.7128] }, // Example coordinates for New York City
                { name: "East North Central", coordinates: [-87.6298, 41.8781] }, // Example coordinates for Chicago
                { name: "West North Central", coordinates: [-93.2650, 44.9778] }, // Example coordinates for Minneapolis
                { name: "New England", coordinates: [-71.0589, 42.3601] }, // Example coordinates for Boston
                { name: "East South Central", coordinates: [-86.7816, 36.1627] }, // Example coordinates for Nashville
                { name: "West South Central", coordinates: [-95.3698, 29.7604] }, // Example coordinates for Houston
            ];

            const groupedData = {};
            data = data.filter(d => d.sleep_freq !== "Never");
            data.forEach(item => {
                const locationKey = item.location;
                const relationshipYears = item.relationship_years;

                if (!groupedData[locationKey]) {
                    groupedData[locationKey] = {};
                }
                if (!groupedData[locationKey][relationshipYears]) {
                    groupedData[locationKey][relationshipYears] = [];
                }
                groupedData[locationKey][relationshipYears].push(item);
            });

            let aggregatedData = []
            for (let key in groupedData) {
                let chileObj = groupedData[key];
                let childArray = []
                for (let childKey in chileObj) {
                    let child = {
                        years: childKey,
                        items: chileObj[childKey],
                        count: chileObj[childKey].length
                    }
                    childArray.push(child)
                }
                let obj = {
                    location: key,
                    coordinates: locations.find(it => it.name === key).coordinates,
                    items: childArray
                }
                aggregatedData.push(obj)
            }

            return aggregatedData;

        }

        function plotCircles(fulldata, data, projection, map, chartHeight, chartWidth) {
            const flatData = data.flatMap(d =>
                d.items.map(item => ({
                    coordinates: d.coordinates,
                    location: d.location,
                    count: item.count,
                    years: item.years,
                    items: item.items
                }))
            );
            let sizeScale = d3.scaleSqrt()
                .domain([0, d3.max(flatData, d => d["count"])])
                .range([5, 30]);

            const simulation = d3.forceSimulation(flatData)
                .force('x', d3.forceX(d => projection(d.coordinates)[0]).strength(0.2))
                .force('y', d3.forceY(d => projection(d.coordinates)[1]).strength(0.2))
                .force('collide', d3.forceCollide(d => sizeScale(d.count)))
                .on('tick', ticked);

            let zoomedBubble = null;
            function ticked() {
                const circles = map.selectAll('circle')
                    .data(flatData)
                    .join('circle')
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y)
                    .attr('r', d => sizeScale(d.count))
                    .style('fill', function (d) {
                        if (d.years === 'Less than 1 year') {
                            return 'url(#image1)';
                        } else if (d.years === '1-5 years') {
                            return 'url(#image2)';
                        } else if (d.years === '6-10 years') {
                            return 'url(#image3)';
                        } else if (d.years === '11-15 years') {
                            return 'url(#image4)';
                        } else if (d.years === '16-20 years') {
                            return 'url(#image5)';
                        } else if (d.years === 'More than 20 years') {
                            return 'url(#image6)';
                        }
                    })
                    .on('click', function (event, d) {
                        const scale = 4;
                        const [x, y] = projection([d.coordinates[0], d.coordinates[1]]);
                        if (zoomedBubble === d) {
                            map.transition().duration(750).call(
                                zoom.transform,
                                d3.zoomIdentity
                            );
                            zoomedBubble = null;
                        } else {
                            map.transition().duration(750).call(
                                zoom.transform,
                                d3.zoomIdentity.translate(mapWidth / 2 - x * scale, mapHeight / 2 - y * scale).scale(scale)
                            );
                            zoomedBubble = d;
                        }
                    })
                    .on('mouseover', function (event, d) {
                        circles.style('opacity', 0.5);
                        circles.filter(d2 => d2.coordinates[0] === d.coordinates[0] && d2.coordinates[1] === d.coordinates[1])
                            .style('opacity', 1);
                        var fullD = fulldata.filter(it => it.location === d.location);
                        const locationData = flatData.filter(d2 => d2.location === d.location);
                        const counts = getCounts(locationData);
                        legend.selectAll('.legend-count')
                            .text(d => (counts[d] / fullD.length) ? `${((counts[d] / fullD.length) * 100).toFixed(1)}%` : "0%");

                        var tooltip = document.getElementById('mapTooltip');
                        tooltip.style.display = 'block';
                        tooltip.style.left = event.pageX + 10 + 'px'; // Position the tooltip 10px to the right of the cursor
                        tooltip.style.top = event.pageY + 10 + 'px'; // Position the tooltip 10px below the cursor
                        tooltip.innerHTML = d.location; // Set the tooltip content

                    })
                    .on('mouseout', function () {
                        circles.style('opacity', 1);
                        const counts = getCounts(flatData);
                        legend.selectAll('.legend-count')
                            .text(d => (counts[d] / fulldata.length) ? `${((counts[d] / fulldata.length) * 100).toFixed(1)}%` : "0%");

                        var tooltip = document.getElementById('mapTooltip');
                        tooltip.style.display = 'none';
                    });
            }
            const legendSvg = d3.select('#mapLegend');
            const imageUrls = {
                'Less than 1 year': './less_1_years.svg',
                '1-5 years': './1_5_years.svg',
                '6-10 years': './6_10_years.svg',
                '11-15 years': './11_15_years.svg',
                '16-20 years': './16_20_years.svg',
                'More than 20 years': './20_more_years.svg'
            };
            const colorScale = d3.scaleOrdinal()
                .domain(['Less than 1 year', '1-5 years', '6-10 years', '11-15 years', '16-20 years', 'More than 20 years'])
                .range(['#ccffcc', '#99ff99', '#66ff66', '#33cc33', '#009900', '#006600']);

            const legend = legendSvg.selectAll('.legend')
                .data(colorScale.domain())
                .enter().append('g')
                .attr('class', 'legend')
                .attr('transform', function (d, i) { return 'translate(' + i * 150 + ', 180)'; });

            legendSvg.append('text')
                .attr('x', 130)
                .attr('y', 80)
                .attr('text-anchor', 'middle')
                .style('font-size', '18px')
                .style('font-weight', 'bold')
                .text('Legend of relationship years');
            legend.append('image')
                .attr('x', 24)
                .attr('y', -70)
                .attr('width', 70)
                .attr('height', 70)
                .attr('href', d => imageUrls[d]);

            legend.append('text')
                .attr('x', 24)
                .attr('y', 10)
                .attr('dy', '.35em')
                .text(d => d);

            var counts = getCounts(flatData);
            legend.append('text')
                .attr('class', 'legend-count')
                .attr('x', 24)
                .attr('y', 30)
                .style('font-size', '30px')
                .style('font-weight', 'bold')
                .style('fill', '#894435')
                .attr('dy', '.35em')
                .text(d => `${((counts[d] / fulldata.length) * 100).toFixed(1)}%` || "0%");

            const mapTitle = d3.select('#mapTitle');

            mapTitle.append('text')
                .attr('x', 450)
                .attr('y', 30)
                .attr('text-anchor', 'middle')
                .style('font-size', '40px')
                .style('font-weight', 'bold')
                .attr("class", "montecarlo-regular")
                .text('Relationship Years and Sleeping Apart');


        }

        function getCounts(data) {
            const counts = data.reduce((acc, d) => {
                acc[d.years] = (acc[d.years] || 0) + d.count;
                return acc;
            }, {});
            return counts;
        }
        function wrapText(text, width) {
            text.each(function () {
                var text = d3.select(this),
                    words = text.text().split(/\s+/).reverse(),
                    word,
                    line = [],
                    lineNumber = 0,
                    lineHeight = 1.1, // ems
                    x = text.attr("x"),
                    y = text.attr("y"),
                    dy = parseFloat(text.attr("dy") || 0),
                    tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");

                while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    if (tspan.node().getComputedTextLength() > width) {
                        line.pop(); // Remove the word that overflows
                        tspan.text(line.join(" ")); // Set the text without the overflowing word
                        line = [word]; // Start a new line with the overflowing word
                        tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                    }
                }
            });
        }

    </script>
</body>

</html>